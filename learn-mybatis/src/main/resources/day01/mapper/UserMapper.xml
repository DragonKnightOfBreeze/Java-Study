<?xml version="1.0" encoding="UTF-8"?>
<!--namespace：命名空间，作用是对sql进行分类化管理-->
<!--如果使用mapper代理方法开发，namespace有特殊的重要的作用-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.windea.study.mybatis.day01.mapper.UserMapper">
	<!--在映射文件中配置很多sql语句-->
	<!--通过select执行数据库查询-->
	<!--
		id：标识映射文件中的sql，成为Statement的id
		将sql语句封装到mappedStatement对象中
		parameterType：指定参数的类型
		#{ParamName}标识一个占位符
		如果输入参数是简单类型，其中要接收的参数名可以任意
		resultType：指定输出结果所映射的java对象类型
	-->
	<select id="findUserById" parameterType="int" resultType="com.windea.study.mybatis.day01.domain.User">
		select * from User where id = #{id}
	</select>

	<!--resultType：指定的就是单条数据映射的java对象类型-->
	<!--
		${}：表示拼接sql串，将接收到的参数内容不加任何修饰，拼接到sql中
		使用时可能会引起sql注入，
		${value}:接收输入参数的内容，如果是简单类型，其中只能使用value
	-->
	<select id="findUserByUsername" parameterType="string" resultType="com.windea.study.mybatis.day01.domain.User">
		select * from User where username like '%${value}%'
	</select>

	<select id="findAllUser" resultType="com.windea.study.mybatis.day01.domain.User">
		select * from User
	</select>

	<!--#{}里面写的是实体类的属性名，通过ognl获取对象的属性值-->
	<insert id="insertUser" parameterType="com.windea.study.mybatis.day01.domain.User">
		<!--
			将插入数据的主键返回到user对象中
			通过LAST_INSERT_ID()函数获取自增主键的值
			keyProperty：将查询到的值插入到实体类的属性，order：执行顺序
		-->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select LAST_INSERT_ID();
		</selectKey>
		insert into User(username,birthday,sex,address)
		value (#{username},#{birthday},#{sex},#{address})
	</insert>

	<delete id="deleteUserById" parameterType="int">
		delete from User where id = #{id}
	</delete>

	<!--id是必须存在的-->
	<update id="updateUser" parameterType="com.windea.study.mybatis.day01.domain.User">
		update User set username=#{username}, birthday=#{birthday}, sex=#{sex}, address=#{address} where id = #{id}
	</update>

	<!--用户信息的综合查询-->
	<select id="findUserByConditions"
	        parameterType="com.windea.study.mybatis.day01.domain.view.UserQuery"
	        resultType="com.windea.study.mybatis.day01.domain.ExtendedUser">
		select *
		from User
		where User.username like '%${user.username}%'
		  and User.sex = #{user.sex} ;
	</select>

	<!--
		定义resultMap（在这个namespace下，可能需要在前面加上namespace）
		id：resultMap的唯一标志 type：最终映射成的对象类型
		id：对表的主键对应的列的映射 result：对普通列的映射
	-->
	<resultMap id="userResultMap" type="com.windea.study.mybatis.day01.domain.User">
		<id column="_id" property="id"/>
		<result column="_username" property="username"/>
	</resultMap>

	<!--使用resultMap进行输出映射-->
	<select id="findUserById2" parameterType="int" resultMap="userResultMap">
		select id _id, username _username from User where id = #{value}
	</select>

	<!--修改过的用户信息的综合查询-->
	<!--动态sql-->
	<!--where标签：可以自动去掉条件中的第一个and-->
	<select id="findUserByConditions2"
	        parameterType="com.windea.study.mybatis.day01.domain.view.UserQuery"
	        resultType="com.windea.study.mybatis.day01.domain.ExtendedUser">
		select * from User
		<where>
			<!--<if test="user != null">-->
			<!--<if test="user.username != null and user.username != ''">-->
			<!--and User.username like '%${user.username}%'-->
			<!--</if>-->
			<!--<if test="user.sex != null and user.sex != ''">-->
			<!--and User.sex = #{user.sex} ;-->
			<!--</if>-->
			<!--</if>-->
			<!--引用sql片段，如果不在本配置文件中，需要加namespace-->
			<include refid="query_user_where"/>
		</where>
	</select>

	<!--定义sql片段-->
	<sql id="query_user_where">
		<if test="user != null">
			<if test="user.username != null and user.username != ''">
				and user.username like '%${user.username}%'
			</if>
			<if test="user.sex != null and user.sex != ''">
				and user.sex = #{user.sex} ;
			</if>
		</if>
	</sql>

	<!--通过多个id进行查询-->
	<select id="findUserByMultiId"
	        parameterType="com.windea.study.mybatis.day01.domain.view.UserQuery"
	        resultType="com.windea.study.mybatis.day01.domain.ExtendedUser">
		select * from User where
		<!--select * from User where id=1 or id=10 or id=16-->
		<!--
			collection：指定输入对象中的集合属性
			item：每次遍历生成的元素对象
			open、close：开始/结束拼接时拼接，例如` and(` / `)`
			sperator：遍历的两个对象之间需要拼接的串
		-->
		<!--
		<foreach collection="idList" item="user_id" separator="or">
			id=#{user_id}
		</foreach>
		-->
		<!--select * from user where id in (1,10,16)-->
		<foreach collection="idList" item="user_id" open="id in (" separator="," close=")">
			#{user_id}
		</foreach>
	</select>
</mapper>
