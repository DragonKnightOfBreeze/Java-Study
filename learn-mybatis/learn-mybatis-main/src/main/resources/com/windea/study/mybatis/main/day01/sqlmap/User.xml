<?xml version="1.0" encoding="UTF-8"?>
<!--namespace：命名空间，作用是对sql进行分类化管理-->
<!--如果使用mapper代理方法开发，namespace有特殊的重要的作用-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="test">
	<!--在映射文件中配置很多sql语句-->
	<!--通过select执行数据库查询-->
	<!--
		id：标识映射文件中的sql，成为Statement的id
		将sql语句封装到mappedStatement对象中
		parameterType：指定参数的类型
		#{ParamName}标识一个占位符
		如果输入参数是简单类型，其中要接收的参数名可以任意
		resultType：指定输出结果所映射的java对象类型
	-->
	<select id="findUserById" parameterType="int" resultType="com.windea.study.mybatis.main.day01.domain.User">
		select * from User where id = #{id}
	</select>

	<!--resultType：指定的就是单条数据映射的java对象类型-->
	<!--
		${}：表示拼接sql串，将接收到的参数内容不加任何修饰，拼接到sql中
		使用时可能会引起sql注入，
		${value}:接收输入参数的内容，如果是简单类型，其中只能使用value
	-->
	<select id="findUserByUsername" parameterType="string" resultType="com.windea.study.mybatis.main.day01.domain.User">
		select * from User where username like '%${value}%'
	</select>

	<select id="findAllUser" resultType="com.windea.study.mybatis.main.day01.domain.User">
		select * from User
	</select>

	<!--#{}里面写的是实体类的属性名，通过ognl获取对象的属性值-->
	<insert id="insertUser" parameterType="com.windea.study.mybatis.main.day01.domain.User">
		<!--
			将插入数据的主键返回到user对象中
			通过LAST_INSERT_ID()函数获取自增主键的值
			keyProperty：将查询到的值插入到实体类的属性，order：执行顺序
		-->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select LAST_INSERT_ID();
		</selectKey>
		insert into User(username,birthday,sex,address)
		value (#{username},#{birthday},#{sex},#{address})
	</insert>

	<delete id="deleteUserById" parameterType="int">
		delete from User where id = #{id}
	</delete>

	<!--id是必须存在的-->
	<update id="updateUser" parameterType="com.windea.study.mybatis.main.day01.domain.User">
		update User set username=#{username}, birthday=#{birthday}, sex=#{sex}, address=#{address} where id = #{id}
	</update>
</mapper>
